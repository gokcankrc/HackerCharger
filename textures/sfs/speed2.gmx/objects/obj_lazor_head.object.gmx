<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lazor_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1/6
creation_angle = 90;
attack_angle = 0
max_angle = 0
min_angle = 0

shoot_cooldown = 15
shooting = false
shoot_startup = 0

imagespeed = image_speed
in_range = false;
attack_range = 7000;
in_actualrange = false

alarm_0 = 2


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



//is in range? direction and look and imagE_angle

image_speed = imagespeed * global.all_var;

if attack_range &gt; distance_to_object(obj_player) then in_actualrange = true
else in_actualrange = false


var inst2 = point_direction(x,y, obj_player_follower.x, obj_player_follower.y)






    
if in_actualrange
    {
    var inst3 = collision_line(x,y, obj_player.x, obj_player.y, obj_block,false,true)
    if inst3 == noone then in_range = true
    else in_range = false
        
    
    }
 
    

if !in_range then shoot_cooldown = 15  //attack first time seen delay
  

if in_range and !shooting 
    {
    image_angle  =  point_direction(x,y, obj_player_future.x, obj_player_future.y) - 90
    
    if shoot_cooldown &lt; 0
        {
        shooting = true
        shoot_startup = 30
        alarm_0 = 90
        
        sprite_index = spr_lazor_shoot
        image_index = 04
        image_speed = 1/10
        }
    }
//if shooting and shoot_startup &lt; 0

//if  &gt;-5 then -= 1 * global.all_var
///
// attack
attack_angle = image_angle + 90
if !in_range then shoot_cooldown = 15
if shoot_cooldown &lt; 0 and shooting
    {
    var inst = instance_create(x+ lengthdir_x(128,attack_angle), y + lengthdir_y(128,attack_angle) , obj_lazor)
    
    with(inst)
            {
            image_angle = other.attack_angle
            }
    var range = 128
    mid_coll = collision_line(x  +lengthdir_x(range,attack_angle), y + lengthdir_y(range,attack_angle), x +lengthdir_x(128 + range,attack_angle), y + lengthdir_y(128+range,attack_angle),obj_block,true,true)
    while (mid_coll == noone)
        {
        
        
        range += 128
        var inst  = instance_create(x + lengthdir_x(range,attack_angle), y + lengthdir_y(range,attack_angle), obj_lazor)
        with(inst)
            {
            image_angle = other.attack_angle
            }
        mid_coll = collision_line(x + lengthdir_x(range,attack_angle), y + lengthdir_y(range,attack_angle) ,x + lengthdir_x(range + 128,attack_angle), y + lengthdir_y(range + 128,attack_angle) ,obj_block,true,true)
        }
    
    
    
    
    
    shoot_cooldown = 170
    }
//attack end
if alarm_0 &lt; 0
    {
    sprite_index = spr_lazor_head
    image_index = 0
    shooting = false
    }

if alarm_0 &gt; -2 then alarm_0 -= 1 * global.all_var
if shoot_cooldown&gt;-5 then shoot_cooldown-= 1 * global.all_var

if shoot_startup &gt;-5 then shoot_startup-= 1 * global.all_var

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
